services:
  db:
    image: postgres:16.3-alpine3.19
    volumes:
      - db-production:/var/lib/postgresql/data
    env_file: '.env.production'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  db-migration:
    image: migrate/migrate:v4.17.1
    volumes:
      - ./backend-service/db/migrations:/migrations
    env_file: '.env.production'
    command:
      ['-path=/migrations', '-database', '${POSTGRES_SOURCE}', '-verbose', 'up']
    depends_on:
      - db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: none

  backend:
    image: aryyadocker/swarm-orchestra-101-backend-production:1.0
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  frontend:
    image: aryyadocker/swarm-orchestra-101-frontend-production:1.0
    ports:
      - 80:80
    depends_on:
      - backend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  
  visualizer:
    image: bretfisher/visualizer
    ports:
      - 8080:8080
    stop_grace_period: 1m30s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  db-production:
